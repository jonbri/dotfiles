#!/usr/bin/perl -w
# pin - wrapper for "git push"

use strict;

use Getopt::Long;

my $a_force;
my $a_dryRun;
my $a_local;
my $a_verbose;
my $a_remote;
my $a_help;

sub help() {
    print STDOUT <<'HELP';

pin - "git push" wrapper

USAGE:
  >> pin [options]

Options:
  --force   (-f) Skip confirmations
  --dry-run (-d) Just print command
  --local   (-l) Just stage and amend
  --remote  (-r) Specify remote
  --verbose (-v) extra logging
  --help    (-h) See this message

EXAMPLES:
  >> pin    # push up to remote
  >> pin -f # push w/o confirm

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}


sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

sub confirm($) {
    my ($message)=@_;
    print $message;
    my $ok=<>;
    chomp $ok;
    return $ok;
}

MAIN: {
    GetOptions(
        'help' => \$a_help,
        'dry-run' => \$a_dryRun,
        'force' => \$a_force,
        'remote:s' => \$a_remote,
        'local' => \$a_local,
        'verbose' => \$a_verbose,
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    # exit if not in a git repo
    my $isGit = `isgit`;
    chomp $isGit;
    if ($isGit ne 'true') {
        print "not a git repo\n";
        exit 1;
    }

    # exit if no outstanding changes
    my $gitStatus = `status --format "%{cleandirty}%{leftright}"`;
    chomp $gitStatus;
    if ($gitStatus eq '') {
        print "nothing to do\n";
        exit 0;
    }

    my $toplevel = `git rev-parse --show-toplevel`;
    chomp $toplevel;
    my $gitCommand = "git -C \"${toplevel}\" ";

    if (!defined $a_remote) {
        $a_remote = "origin";
    }

    my $BRANCH = `status --format "%{branch}"`;
    chomp $BRANCH;
    my $GIT_NAME=`persona | nth --first`;
    chomp $GIT_NAME;
    my $GIT_EMAIL=`persona | nth --last`;
    chomp $GIT_EMAIL;
    my $REMOTE=$a_remote;

    # warn if user not found in history
    my $KNOWN_RESULTS=`persona --known-from HEAD~`;
    chomp $KNOWN_RESULTS;
    if ($KNOWN_RESULTS =~ /[@]+.*[\s]+not found$/) {
      print "WARNING: ${GIT_NAME} (${GIT_EMAIL}) NOT FOUND in this repo's history\n";
      confirm("continue? ");
    }

    # optionally fetch
    if (defined $a_local) {
        if (defined $a_verbose) {
            print "skipping fetch\n";
        }
    } else {
        `${gitCommand} fetch --quiet`;
    }

    # handle outstanding non-committed changes
    if (`${gitCommand} status --porcelain`) {
        if ($a_verbose) {
            print "outstanding changes\n";
        }
        print `${gitCommand} status --short`;

        if (! defined $a_force) {
            confirm("amend and continue? ");
        }
        print `commit --stage --quiet --amend`;
    }

    # exit early if local option is given
    if (defined $a_local) {
        if (defined $a_verbose) {
            print "skipping push\n";
        }
        print "done\n";
        exit 0;
    }

    # generate push command
    my $command = "${gitCommand} push --force $REMOTE $BRANCH";
    my $leftright = `status --format "%{leftright}"`;
    chomp $leftright;
    if (!defined $a_force && $leftright =~ /^[\d]+-0$/) {
      $command = "${gitCommand} push $REMOTE $BRANCH";
    }

    # confirm before push
    if (defined $a_force) {
        if ($a_verbose) {
            print "skipping confirmation\n";
        }
    } else {
        if (! `${gitCommand} rev-parse --verify $REMOTE/$BRANCH 2>/dev/null`) {
            print "$REMOTE/$BRANCH does not exist\n";
        } else {
            print "$leftright\n";
        }
        if (! defined $a_dryRun) {
            confirm("$command (press enter) ");
        }
    }

    # optionally execute push command
    if (defined $a_dryRun) {
        print "$command\n";
    } else {
        print `crumb pin_$BRANCH`;
        print `$command`;
        print "done\n";
    }

    exit 0;
}

