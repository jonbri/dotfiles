#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_all;
my $a_reverse;
my $a_help;

sub help() {
    print STDERR <<'HELP';

most - show the most-used commands

USAGE:
  >> most

Options:
  --all     (-a) Show all commands, not just the top 10
  --reverse (-r) Show the least-used commands
  --help    (-h) See this message

EXAMPLES:
  >> most

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

MAIN: {
    GetOptions(
        'help' => \$a_help,
        'all' => \$a_all,
        'reverse' => \$a_reverse,
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    # read in ~/.bash_history
    my $historyFile = $ENV{"HISTFILE"} || "$ENV{HOME}/.bash_history";
    my @history = ();
    if (-e $historyFile) {
        open FILE, "<$historyFile" || die "Unable to open $historyFile: $!";
        @history = <FILE>;
        close FILE;
    }

    # count the number of times each command has been used and store the results in a hash
    my %commandCount = ();
    foreach my $line (@history) {
        chomp $line;

        # remove everything after the first space
        $line =~ s/ .*$//;

        $commandCount{$line}++;
    }

    # sort the commands by usage, followed by the command itself alphabetically
    my @sortedCommands = sort {
        $commandCount{$b} <=> $commandCount{$a} || $a cmp $b
    } keys %commandCount;

    my $total = 10;
    my @output = ();
    my $count = 0;
    foreach my $command (@sortedCommands) {
        push @output, "$commandCount{$command} $command\n";
        $count++;
        last if $count >= $total && !$a_all;
    }

    if (defined $a_reverse) {
        @output = reverse @output;
    }

    print @output;

    exit 0;
}

