#!/usr/bin/env node

const { exec } = require('child_process');

// Resolve strings to Gerrit change-sets and returns metadata
// Input/Output comes from stdio
//
// Input examples:
// * topic - change-set topic
// * abbreviation - (hc->htmlcommons, gi->guidesinf)
// * hostname - a topic name pattern will be searched for
// * number - will just return the number
//
// The name of the Git repo that corresponds to `pwd` will be
// used to determine which Gerrit project to use for the lookup
//
// Output format is space-delimited: {server} {port} {project} {ref}
// Example: gerrit-html5.mycompany.com 29418 html/myproject refs/changes/2/1000/4

// global vars
let sServer;
let sPort;

(async function() {

  //
  // FUNCTIONS
  //

  // resolve hc/gi or just return argument as-is
  function resolveAbbreviation(s) {
    // abbreviation for htmlcommons (hc-123 => HTMLCOMMONS-123)
    const aHCAbbrevExec = /^hc[-]?(\d+)$/i.exec(s);
    if (aHCAbbrevExec !== null) {
      return 'HTMLCOMMONS-' + aHCAbbrevExec[1];
    }

    // abbreviation for htmlinternal (hi-123 => HTMLINTERNAL-123)
    const aHIAbbrevExec = /^hi[-]?(\d+)$/i.exec(s);
    if (aHIAbbrevExec !== null) {
      return 'HTMLINTERNAL-' + aHIAbbrevExec[1];
    }

    // abbreviation for guidesinf (gi-123 => GUIDESINF-123)
    const aGIAbbrevExec = /^gi[-]?(\d+)$/i.exec(s);
    if (aGIAbbrevExec !== null) {
      return 'GUIDESINF-' + aGIAbbrevExec[1];
    }

    // abbreviation for novacommons (nc-123 => NOVACOMMONS-123)
    const aNCAbbrevExec = /^nc[-]?(\d+)$/i.exec(s);
    if (aNCAbbrevExec !== null) {
      return 'NOVACOMMONS-' + aNCAbbrevExec[1];
    }

    return s;
  }

  // resolve hostname or just return argument as-is
  async function resolveHostname(s) {
    // get system hostname
    async function getHostname() {
      return new Promise(function(resolve) {
        exec('hostname', (err, stdout, stderr) => {
          resolve(stdout.trim());
        });
      });
    }
    return new Promise(async function(resolve) {
      // if not using the hostname feature just return
      if (/hostname/i.test(s) === false) {
        resolve(s);
        return;
      }
      const sHostname = await getHostname();
      const aHostnameMatch =  sHostname.match(/-(\w+-\d+)-/);
      if (aHostnameMatch !== null && aHostnameMatch.length >= 1) {
        resolve(aHostnameMatch[1].toUpperCase());
      } else {
        console.error('Hostname could not be resolved');
        process.exit(1);
      }
    });
  }

  // get list of all projects on the gerrit server
  async function getProjectList() {
    return new Promise(function(resolve) {
      exec(`ssh -p ${sPort} ${sServer} gerrit ls-projects`, (err, stdout) => {
        resolve(stdout.split('\n'));
      });
    });
  }

  // determine url and port from origin remote
  async function getServerInfo() {
    return new Promise(function(resolve) {
      exec('git config --get remote.origin.url', (err, stdout, stderr) => {
        const aParts = stdout.match(/[@](.*)[:]([\d]+)/);
        if (!aParts || aParts.length < 2) {
          console.error('"origin" remote has non-expected format');
          process.exit(1);
        } else {
          resolve({
            url: aParts[1],
            port: aParts[2]
          });
        }
      });
    });
  }

  async function getRepoName() {
    return new Promise(function(resolve) {
      exec('git rev-parse --show-toplevel', (err, stdout, stderr) => {
        resolve(stdout.split('/').reverse()[0].trim());
      });
    });
  }

  async function getQueryJSON(sArg, sProjectName) {
    const sQuery = `
      ssh -p ${sPort} ${sServer} gerrit query
      --format JSON
      status:OPEN
      --current-patch-set
      project:${sProjectName}
      ${sArg}
    `.replace(/\n/g, '').replace(/\s+/g, ' ');
    return new Promise(function(resolve) {
      exec(sQuery, (err, stdout, stderr) => {
        var iMatches = stdout.match(/"rowCount":\d+/g)[0].match(/\d+/)[0];
        if (iMatches === 0) {
          console.error('No results found');
          process.exit(1);
        }
        if (iMatches > 1) {
          console.error('Too many results found (' + iMatches + ')');
          process.exit(1);
        }

        // The payload from the ssh request will actually return two groups of json objects.
        // We just need the first one, so remove the one that starts with a "type" key
        const sJSON = stdout.replace(/{"type":"stats".*/, '');

        resolve(JSON.parse(sJSON));
      });
    });
  }

  //
  // EXECUTION STARTS HERE
  //

  // verify command-line arg was passed-in
  if (process.argv[2] === undefined) {
    console.error('Argument required');
    process.exit(1);
  }

  let sInput = process.argv[2].toUpperCase();

  // if a number is passed-in, don't try to resolve, it's probably a change-number
  if (/^\d+$/.test(process.argv[2]) === false) {
    sInput = await resolveHostname(sInput);
    sInput = resolveAbbreviation(sInput);
  }

  // populate sServer and sPort global variables
  const oServerInfo = await getServerInfo();
  sServer = oServerInfo.url;
  sPort = oServerInfo.port;

  const aProjectNames = await getProjectList(),
    sRepoName = await getRepoName(),
    sProjectName = aProjectNames
      .filter(s => new RegExp(sRepoName + '$').test(s))[0];

  if (sProjectName === undefined) {
    console.error('Cannot determine project name');
    process.exit(1);
  }

  // print final result
  const oJSON = await getQueryJSON(sInput, sProjectName);
  console.log(sServer + " " + sPort + " " + oJSON.project + " " + oJSON.currentPatchSet.ref);
}());
