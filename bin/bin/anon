#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_restore;
my $a_list;
my $a_help;

sub help() {
    print STDOUT <<'HELP';

anon - prevent accidental pushes

USAGE:
  >> anon [pattern] [options]

Options:
  --restore (-r) Revert to previous anon
  --list    (-l) List all anon branches
  --help    (-h) See this message

EXAMPLES:
  >> anon     # branch: anon-1234
  >> anon foo # branch: anon-foo-1234
  >> anon --list # list all
  >> anon foo --list # filter by pattern "foo"

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

MAIN: {
    GetOptions(
        'restore' => \$a_restore,
        'list' => \$a_list,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    if (defined $a_restore) {
        my $restoreSHA = `crumb -l | grep anonStart | nth 0 | awk '{ print \$1 }'`;
        chomp $restoreSHA;
        my $restoreBranch = `crumb -l | grep anonStart | nth 0 | awk '{ print \$4 }' | awk -F 'anonStart=' '{ print \$2 }'`;
        chomp $restoreBranch;
        `gwip`;
        `git checkout $restoreBranch`;
        `git reset --hard $restoreSHA`;
        exit 0;
    }

    if (defined $a_list) {
        my $anonBranches = "";
        if (defined $firstArg) {
            $anonBranches = `git branch | grep anon | grep $firstArg`;
        } else {
            $anonBranches = `git branch | grep anon`;
        }
        print $anonBranches;
        exit 0;
    }

    my $branch = `status --format "%{branch}"`;
    chomp $branch;

    `crumb "anonStart=$branch"`;
    my $stamp = `stamp`;
    chomp $stamp;
    my $label = "anon";
    if (defined $firstArg) {
        $label = "anon-$firstArg";
    }
    my $anonBranch="${label}-$stamp";
    `git checkout -b $anonBranch`;
    `snowball`;

    `git commit --amend --reuse-message=HEAD --author="Anon <anon\@anon.no>"`;
    `crumb "anonEnd=$branch"`;

    print "done\n";
    exit 0;
}

