#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_verbose;
my $a_path;
my $a_format;
my $a_help;

sub help() {
    print STDOUT <<'HELP';

status - Git reporting

USAGE:
  >> status [args]

Options:
  --path       (-p) Path to repo
  --format     (-f) Formatted output
  --verbose    (-v) See more details
  --help       (-h) See this message

Format options:
  - branch
  - cleandirty
  - leftright
  - conflicted
  - hasremote

EXAMPLES:
  >> status
  >> status -f "%{branch} %{cleandirty}"

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

MAIN: {
    GetOptions(
        'path=s' => \$a_path,
        'format=s' => \$a_format,
        'verbose' => \$a_verbose,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    if (!defined $a_format) {
        $a_verbose = '1';
    }

    my $path = "";
    if (defined $a_path) {
        $path = $a_path;
    } else {
        $path = `git rev-parse --show-toplevel`;
    }
    chomp $path;

    # exit if not in a git repo
    my $isGit = `isgit ${path}`;
    chomp $isGit;
    if ($isGit ne 'true') {
        print "not a git repo\n";
        exit 1;
    }

    my $gitCommand = "git -C \"${path}\" ";

    my $branchCommand = "$gitCommand rev-parse --abbrev-ref HEAD";
    my $branch = `${branchCommand}`;
    chomp $branch;

    my $workingChanges = "";
    my $working = `${gitCommand} diff --exit-code`;
    chomp $working;
    if ($working ne "") {
        $workingChanges = `${gitCommand} diff --name-only | wc -l`;
        chomp $workingChanges;
    }

    my $stagedChanges = "";
    my $staged = `${gitCommand} diff --cached --exit-code`;
    chomp $staged;
    if ($staged ne "") {
        $stagedChanges = `${gitCommand} diff --cached --name-only | wc -l`;
        chomp $stagedChanges;
    }

    my $untrackedChanges = "";
    my $untracked = `${gitCommand} ls-files -z -o --exclude-standard | sed q1 | tr -d '\\0'`;
    chomp $untracked;
    if ($untracked ne "") {
        $untrackedChanges = `${gitCommand} ls-files . --exclude-standard --others | wc -l`;
        chomp $untrackedChanges;
    }

    my $cleandirty = "";
    my $hasChanges = `${gitCommand} status --porcelain=v1 2>/dev/null | wc -l`;
    chomp $hasChanges;
    if ($hasChanges ne "0") {
        $cleandirty = "*";
    }
    if (defined $a_verbose) {
        if ($workingChanges ne "") {
            $cleandirty .= "w${workingChanges} ";
        }
        if ($stagedChanges ne "") {
            $cleandirty .= "i${stagedChanges} ";
        }
        if ($untrackedChanges ne "") {
            $cleandirty .= "u${untrackedChanges} ";
        }
        # replace spaces with commas and remove ending comma
        $cleandirty =~ s/ /,/g;
        $cleandirty =~ s/,$//g;
    }

    my $hasRemoteCommand = "${gitCommand} remote --verbose | grep ' (fetch)'";
    my $hasRemoteResult = `${hasRemoteCommand}`;
    chomp $hasRemoteResult;
    my $hasRemote = "false";
    if ($hasRemoteResult ne "") {
        $hasRemote = "true";
    }

    my $leftright = "";
    if ($hasRemote eq "true") {
        my $revListCommand = "${gitCommand} rev-list --left-right --count HEAD...origin/${branch}";
        my $revListOutput = `${revListCommand}`;
        chomp $revListOutput;
        $revListOutput =~ s/^(\d+)[\s+](\d+)$/$1-$2/g;
        if (defined $a_verbose || $revListOutput ne "0-0") {
            $leftright = $revListOutput;
        }
    }

    my $confictedOutput = `${gitCommand} ls-files -u | wc -l`;
    chomp $confictedOutput;
    my $isConflicted = 'false';
    if ($confictedOutput gt 0) {
        $isConflicted = 'true';
    }

    if (defined $a_format) {
        my $output = "${a_format}";
        $output =~ s/%\{branch\}/${branch}/g;
        $output =~ s/%\{cleandirty\}/${cleandirty}/g;
        $output =~ s/%\{leftright\}/${leftright}/g;
        $output =~ s/%\{conflicted\}/${isConflicted}/g;
        $output =~ s/%\{hasremote\}/${hasRemote}/g;
        print "$output\n";
        exit 0;
    }

    print "branch: $branch\n";
    print "leftright: $leftright\n";
    print "cleandirty: $cleandirty\n";
    print "conflicted: $isConflicted\n";
    print "hasRemote: $hasRemote\n";
    exit 0;
}

