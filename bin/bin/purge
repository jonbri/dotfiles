#!/usr/bin/perl -w
# purge - Clean up local stray branches

use strict;

use Getopt::Long;

my $a_dryRun;
my $a_force;
my $a_help;

sub help() {
    print STDOUT <<'HELP';

purge - delete local branches

USAGE:
  >> purge [pattern] [options]

Options:
  --dry-run (-d) Just show branch matches
  --force   (-f) Skip confirmation
  --help    (-h) See this message

EXAMPLES:
  >> purge        # interactive mode with all branches
  >> purge -d     # see local branches
  >> purge abc -l # see matches
  >> purge abc -f # force delete via pattern

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

sub confirm($) {
    my ($message)=@_;
    print $message;
    my $ok=<>;
    chomp $ok;
    return $ok;
}

sub deleteBranch($$) {
    my ($branch, $prefix) = @_;
    my $command = "git branch -D $branch";
    if (defined $a_force || confirm("${prefix} ${command} (y/n) ") =~ /^y/i) {
        runCommand("crumb purge_$branch");
        runCommand($command);
    }
}


MAIN: {
    GetOptions(
        'dry-run' => \$a_dryRun,
        'force' => \$a_force,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    my @branches = runCommand("git for-each-ref --format='%(refname:short)' refs/heads/");
    my $currentBranch = join('', runCommand("git rev-parse --abbrev-ref HEAD"));
    chomp($currentBranch);

    # exclude main and the current branch
    @branches = grep(!/^master$/, @branches);
    @branches = grep(!/^main$/, @branches);
    @branches = grep(!/^$currentBranch$/, @branches);

    if (defined $firstArg) {
        @branches = grep (/.*$firstArg/, @branches);
    }

    if (scalar @branches == 0) {
        exit 0;
    }

    if (defined $a_dryRun) {
        foreach (@branches) {
            print $_;
        }
        exit 0;
    }

    if (! defined $a_force) {
        print "This program only deletes local branches\n";
    }
    my $count = 1;
    foreach (@branches) {
        chomp;

        my $prefix = "($count/".(scalar @branches).")";
        deleteBranch("$_", $prefix);
        $count = $count + 1;
    }
    print "done\n";
    exit 0;
}
