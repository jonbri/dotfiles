#!/usr/bin/perl -w
# purge - Clean up local stray branches

use strict;

use Getopt::Long;

my $a_dryRun;
my $a_force;
my $a_remote;
my $a_help;
my @localBranches;
my @remoteBranches;
my $count = 1;
my $totalCount = 0;

sub help() {
    print STDOUT <<'HELP';

purge - delete local branches

USAGE:
  >> purge [pattern] [options]

Options:
  --dry-run (-d) Just show branch matches
  --remote  (-r) Specify a remote
  --force   (-f) Skip confirmation
  --help    (-h) See this message

EXAMPLES:
  >> purge        # interactive mode with all branches
  >> purge -d     # see local branches
  >> purge abc -d # see "abc" matches
  >> purge abc -f # force delete via pattern

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

sub confirm($) {
    my ($message)=@_;
    print $message;
    my $ok=<>;
    chomp $ok;
    return $ok;
}

sub reportDone() {
    print "done\n\n";
}

sub incrementCount() {
    $count = $count + 1;
}

sub generatePrefix {
    return "$count/".$totalCount;
}

sub fetchAndPrune() {
    print "fetching and pruning...";
    `git fetch $a_remote --quiet`;
    `git remote prune $a_remote`;
    sleep 1;
    print "done\n";
}

sub deleteLocalBranch {
    my ($branch) = @_;
    my $command = "git branch -D $branch";
    my $sha = `git rev-parse --short $branch`;
    chomp $sha;
    my $message = `git log -1 --pretty=%B $branch`;
    chomp $message;
    my $answer = '';
    if (!defined $a_force) {
        $answer = confirm("\n".generatePrefix."\n  LOCAL\n  ${sha} ${message}  ${command} (y/n/i) ");
    } else {
        $answer = 'y';
    }
    if ($answer =~ /^y/i) {
        runCommand("crumb purge_$branch");
        runCommand($command);
        if (!defined $a_force) {
            reportDone();
        }
    } elsif ($answer =~ /^i/i) {
        print "\n";
        print `git email $branch | nth 0-11`;
        deleteLocalBranch(@_);
    }
}

sub deleteRemoteBranch {
    if (defined $a_force) {
        return;
    }

    my ($branch) = @_;
    my $remoteBranch = $branch;
    $remoteBranch =~ tr/\// /;
    my $command = "git push --delete $a_remote $remoteBranch";
    my $sha = `git rev-parse --short $a_remote/$remoteBranch`;
    my $message = `git log -1 --pretty=%B $a_remote/$remoteBranch`;
    chomp $sha;
    chomp $message;
    my $answer = confirm("\n".generatePrefix."\n  REMOTE\n  ${sha} ${message}  ${command} (y/n/i) ");
    if ($answer =~ /^y/i) {
        runCommand("crumb purge_$branch");
        runCommand($command);
        reportDone();
    } elsif ($answer =~ /^i/i) {
        print "\n";
        print `git email $a_remote/$remoteBranch | nth 0-11`;
        deleteRemoteBranch(@_);
    }
}


MAIN: {
    GetOptions(
        'dry-run' => \$a_dryRun,
        'remote:s' => \$a_remote,
        'force' => \$a_force,
        'help' => \$a_help
    ) || (help() && exit 1);

    if (!defined $a_remote) {
        $a_remote = "origin";
    }

    # show help if either arg or option is given
    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    if (!defined $a_dryRun) {
        if (defined $a_force) {
            print "When --force is used only local branches are deleted\n";
            sleep 1;
        } else {
            fetchAndPrune();
        }
    }

    @localBranches = runCommand("git for-each-ref --format='%(refname:short)' refs/heads/");
    my $currentBranch = join('', runCommand("git rev-parse --abbrev-ref HEAD"));
    chomp($currentBranch);

    # exclude main and the current branch
    @localBranches = grep(!/^master$/, @localBranches);
    @localBranches = grep(!/^main$/, @localBranches);
    @localBranches = grep(!/^$currentBranch$/, @localBranches);

    @remoteBranches = runCommand("git branch -r | sed 's/^  //'");
    @remoteBranches = grep(!/^$a_remote\/master$/, @remoteBranches);
    @remoteBranches = grep(!/^$a_remote\/main$/, @remoteBranches);
    @remoteBranches = grep(!/^$a_remote\/$currentBranch$/, @remoteBranches);

    if (defined $firstArg) {
        @localBranches = grep (/.*$firstArg/, @localBranches);
        @remoteBranches = grep (/.*$firstArg/, @remoteBranches);
    }

    if (scalar @localBranches == 0 && scalar @remoteBranches == 0) {
        exit 0;
    }

    $totalCount = scalar @localBranches + scalar @remoteBranches;

    if (defined $a_dryRun) {
        foreach (@localBranches) {
            print $_;
        }
        exit 0;
    }

    foreach (@localBranches) {
        chomp;
        my $branch = $_;
        deleteLocalBranch("$branch", generatePrefix());
        incrementCount();
        if (! defined $a_force && grep(/^$a_remote\/$branch$/, @remoteBranches)) {
            deleteRemoteBranch("$branch", generatePrefix());
            incrementCount();
        }
    }

    @remoteBranches = runCommand("git branch --remote | sed 's/^  //'");
    @remoteBranches = grep(!/^$a_remote\/HEAD /, @remoteBranches);
    @remoteBranches = grep(!/^$a_remote\/master$/, @remoteBranches);
    @remoteBranches = grep(!/^$a_remote\/main$/, @remoteBranches);
    @remoteBranches = grep(!/^$a_remote\/$currentBranch$/, @remoteBranches);
    if (defined $firstArg) {
        @remoteBranches = grep (/.*$firstArg/, @remoteBranches);
    }
    foreach (@remoteBranches) {
        chomp;
        my $branch = $_;
        $branch =~ s/$a_remote\///;
        deleteRemoteBranch("$branch", generatePrefix());
        incrementCount();
    }

    print "done\n";
    exit 0;
}
