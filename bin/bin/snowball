#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_working;
my $a_index;
my $a_untracked;
my $a_conflict;
my $a_release;
my $a_empty;
my $a_type;
my $a_scope;
my $a_description;
my $a_help;

my $scratch_file = "_delete.me";
my $MAIN=`main`;
chomp $MAIN;

sub help() {
    print STDERR <<'HELP';

snowball - make fake git changes

USAGE:
  >> snowball [options]

Options:
  --working     (-w) working directory dirty
  --index       (-i) cache (stage) dirty
  --untracked   (-u) create untracked file
  --empty       (-e) create empty commit
  --conflict    (-c) create merge conflict
  --release     (-r) create release commit
  --type        (-t) commit type to use (default: "test")
  --scope       (-s) value in parenthesis
  --description (-d) commit description

EXAMPLES:
  >> snowball                   # test: <timestamp>
  >> snowball -d "my message"   # my message
  >> snowball -t "fix" -s "foo" # fix(foo): <timestamp>
  >> snowball -w # dirty working dir
  >> snowball -i # dirty index
  >> snowball -u # untracked

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}


sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

MAIN: {
    GetOptions(
        'working' => \$a_working,
        'index' => \$a_index,
        'untracked' => \$a_untracked,
        'conflict' => \$a_conflict,
        'release' => \$a_release,
        'empty' => \$a_empty,
        'description=s' => \$a_description,
        'type=s' => \$a_type,
        'scope=s' => \$a_scope,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    my @trackedFiles = runCommand("git ls-tree -r $MAIN --name-only");
    my $EXISTING_FILE0 = $trackedFiles[0];
    chomp $EXISTING_FILE0;
    my $EXISTING_FILE1 = $trackedFiles[1];
    chomp $EXISTING_FILE1;
    my $EXISTING_FILE2 = $trackedFiles[2];
    chomp $EXISTING_FILE2;

    my $timestamp = `stamp`;
    chomp $timestamp;

    if (defined $a_working) {
        if (!defined $EXISTING_FILE0) {
            print "repo needs at least one tracked file\n";
            exit 1;
        }
        print `echo "snowball working $timestamp" >> $EXISTING_FILE0`;
        exit 0;
    }

    if (defined $a_index) {
        if (!defined $EXISTING_FILE1) {
            print "repo needs at least two tracked files\n";
            exit 1;
        }
        print `echo "snowball index $timestamp" >> $EXISTING_FILE1`;
        print `git add $EXISTING_FILE1`;
        exit 0;
    }

    if (defined $a_untracked) {
        my $random = int(rand(10000));
        print `echo "snowball $timestamp" >> snowball_untracked_log$random.txt`;
        exit 0;
    }

    if (defined $a_conflict) {
        my $random = int(rand(10000));
        if (!defined $EXISTING_FILE2) {
            print "repo needs at least three tracked files\n";
            exit 1;
        }
        print `git branch conflict${random}`;
        print `echo "snowball conflict" >> $EXISTING_FILE2`;
        print `git add $EXISTING_FILE2`;
        print `git commit -m 'snowball conflict'`;
        print `git checkout conflict${random}`;
        print `echo "snowball cause conflict" >> $EXISTING_FILE2`;
        print `git add $EXISTING_FILE2`;
        print `git commit -m 'snowball cause conflict'`;
        print `git checkout -`;
        print `git merge -`;
        exit 0;
    }

    if (defined $a_release) {
        print `echo "release" >> ${scratch_file}`;
        print `git add ${scratch_file}`;
        my $commitMessage = "release: v1.2.3";
        if (defined $a_description) {
            $commitMessage = $a_description;
        }
        print `git commit -m '$commitMessage'`;
        exit 0;
    }

    if (defined $a_empty) {
        print `git commit -m 'empty' --allow-empty`;
        exit 0;
    }

    # default behavior: create commit
    print `echo "$timestamp" >> ${scratch_file}`;
    print `git add ${scratch_file}`;
    my $commitMessage = "test: $timestamp";
    if (defined $a_description || defined $a_type || defined $a_scope) {
      my $message = $a_description;
      if (!defined $message) {
          $message = "$timestamp";
      }
      my $type = $a_type;
      if (!defined $type) {
          $type = "test";
      }
      my $scope = "";
      if ($a_scope) {
          $scope = "($a_scope)";
      }
      $commitMessage = "${type}${scope}: ${message}";
    }
    print `git commit -m '$commitMessage'`;

    exit 0;
}

