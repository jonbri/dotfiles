#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_verbose;
my $a_help;

sub help() {
    print STDOUT <<'HELP';

cleandirty - Git reporting

USAGE:
  >> cleandirty [options] [args]

Options:
  --verbose (-v) See more details
  --help    (-h) See this message

EXAMPLES:
  >> cleandirty

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

MAIN: {
    GetOptions(
        'verbose' => \$a_verbose,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    # exit if not in a git repo
    my $isGit = `isgit`;
    chomp $isGit;
    if ($isGit ne 'true') {
        print "not a git repo\n";
        exit 1;
    }

    my $toplevel = `git rev-parse --show-toplevel`;
    chomp $toplevel;
    my $gitCommand = "git -C \"${toplevel}\" ";

    my $hasChanges = `${gitCommand} status --porcelain=v1 2>/dev/null | wc -l`;
    chomp $hasChanges;
    if ($hasChanges eq "0") {
        exit 0;
    }

    if (! defined $a_verbose) {
        print "*\n";
        exit 0;
    }

    my $workingChanges = "";
    my $working = `${gitCommand} diff --exit-code`;
    chomp $working;
    if ($working ne "") {
        $workingChanges = `${gitCommand} diff --name-only | wc -l`;
        chomp $workingChanges;
    }

    my $stagedChanges = "";
    my $staged = `${gitCommand} diff --cached --exit-code`;
    chomp $staged;
    if ($staged ne "") {
        $stagedChanges = `${gitCommand} diff --cached --name-only | wc -l`;
        chomp $stagedChanges;
    }

    my $untrackedChanges = "";
    my $untracked = `${gitCommand} ls-files -z -o --exclude-standard | sed q1 | tr -d '\\0'`;
    chomp $untracked;
    if ($untracked ne "") {
        $untrackedChanges = `${gitCommand} ls-files . --exclude-standard --others | wc -l`;
        chomp $untrackedChanges;
    }

    my $report = "*";
    if ($workingChanges ne "") {
        $report .= "w${workingChanges} ";
    }
    if ($stagedChanges ne "") {
        $report .= "i${stagedChanges} ";
    }
    if ($untrackedChanges ne "") {
        $report .= "u${untrackedChanges} ";
    }

    # replace spaces with commas and remove ending comma
    $report =~ s/ /,/g;
    $report =~ s/,$//g;

    print "${report}\n";

    exit 0;
}

