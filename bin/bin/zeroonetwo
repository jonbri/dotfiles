#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_root;
my $a_list;
my $a_count;
my $a_exact;
my $a_nth;
my $a_base;
my $a_pin;
my $a_archive;
my $a_help;

my $_0 = $ENV{_0};
my $_1 = $ENV{_1};
my $_2 = $ENV{_2};
my $ZEROONETWO = $ENV{ZEROONETWO};

my $PINNED_0 = `var PINNED_0`;
chomp $PINNED_0;
my $PINNED_1 = `var PINNED_1`;
chomp $PINNED_1;
my $PINNED_2 = `var PINNED_2`;
chomp $PINNED_2;

sub help() {
    print STDOUT <<'HELP';

    zeroonetwo

USAGE:
  >> zeroonetwo [path] [options]

Options:
  --help    (-h) See this message
  --root    (-r) Specify root dir (0,1,2)
  --list    (-l) Show matches
  --nth     (-n) Show nth match (default: 0)
  --count   (-c) Show number of matches
  --base    (-b) Show root path
  --pin     (-p) Pin entry to top of list
  --archive (-a) Move target to archive
  --exact   (-e) Exact match

EXAMPLES:
  >> zeroonetwo              # $_0
  >> zeroonetwo --root 1     # $_1
  >> zeroonetwo foobar       # Filter
  >> zeroonetwo -r 1 fo*ar   # $_1/foobar
  >> zeroonetwo -r 1 -p fo*ar # pin foobar
  >> zeroonetwo foobar --base      # /path/to/0
  >> zeroonetwo foobar --base -r 2 # /path/to/2

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}


MAIN: {
    GetOptions(
        'root=s' => \$a_root,
        'list' => \$a_list,
        'count' => \$a_count,
        'exact' => \$a_exact,
        'nth:s' => \$a_nth,
        'base' => \$a_base,
        'pin' => \$a_pin,
        'archive' => \$a_archive,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    if (!defined $firstArg) {
        $firstArg = "";
    }

    if (!defined $a_root) {
        $a_root = "0";
    }

    my $PREFIX = $_0;
    my $PINNED = $PINNED_0;
    if ($a_root eq "1") {
        $PREFIX = $_1;
        $PINNED = $PINNED_1;
    } elsif ($a_root eq "2") {
        $PREFIX = $_2;
        $PINNED = $PINNED_2;
    }

    my $pathArg = "";
    if ($firstArg eq "") {
        $pathArg = "*";
    } else {
        $pathArg = "*$firstArg*";
    }
    if (defined $a_exact) {
        $pathArg = $firstArg;
    }
    my $pathArgNoWildcard = $pathArg;
    $pathArgNoWildcard =~ s/\*//g;

    my @fullList = runCommand("find $PREFIX -maxdepth 1 -type d -iname \"*\" -printf \"%Ts/%f\\n\" | sort -n | tac");
    @fullList = map { $_ =~ s/^[^\/]*\///; $_ } @fullList;
    @fullList = grep { $_ ne "$a_root\n" } @fullList;
    @fullList = map { chomp; $_ } @fullList;
    if ($PINNED ne '') {
        @fullList = grep { $_ ne $PINNED } @fullList;
        unshift @fullList, $PINNED;
    }

    my @list = runCommand("find $PREFIX -maxdepth 1 -type d -iname \"$pathArg\" -printf \"%Ts/%f\\n\" | sort -n | tac");
    @list = map { $_ =~ s/^[^\/]*\///; $_ } @list;
    @list = grep { $_ ne "$a_root\n" } @list;
    @list = map { chomp; $_ } @list;
    if ($PINNED ne '' && $pathArgNoWildcard eq '' || $PINNED =~ /${pathArgNoWildcard}/) {
        @list = grep { $_ ne $PINNED } @list;
        unshift @list, $PINNED;
    }

    if (defined $a_pin && !defined $a_nth) {
        my $first= $list[0];
        chomp $first;
        if (defined $first) {
          `var "PINNED_${a_root}:${first}"`;
        }
    }

    if (defined $a_list) {
        foreach my $line (@list) {
            chomp $line;
            my $index = 0;
            foreach my $fullLine (@fullList) {
                chomp $fullLine;
                if ($fullLine eq $line) {
                    last;
                }
                $index++;
            }
            print "${a_root}${index}${line}\n";
        }
        exit 0;
    }
    if (defined $a_count) {
        print scalar @list;
        print "\n";
        exit 0;
    }

    my $path = "$PREFIX/$pathArg";
    if (defined $a_nth) {
        if ($a_nth eq "") {
            $a_nth = 0;
        }
        $a_nth = int($a_nth);
        if ($a_nth < 0 || $a_nth >= scalar @list) {
            print STDERR "Invalid index: $a_nth\n";
            exit 1;
        }
        $pathArg = $list[$a_nth];
        chomp $pathArg;
        $path = "$PREFIX/$pathArg";

        if (defined $a_pin) {
            `var "PINNED_${a_root}:${pathArg}"`;
        }
    }
    if (defined $a_base) {
        $path = $PREFIX;
    }

    if (defined $a_archive) {
        if (!defined $a_exact) {
            print STDERR "must use --exact\n";
            exit 1;
        }
        if (!-e $path) {
            print STDERR "Path does not exist: $path\n";
            exit 1;
        }
        my $stamp = `stamp`;
        chomp $stamp;
        my $archiveDir = "${ZEROONETWO}/archive/${stamp}";
        `mkdir -p "${archiveDir}"`;
        `mv "${path}" "${archiveDir}"`;
        print "archived\n";
        print "> ls ${archiveDir}\n";
        my $ls = `ls "${archiveDir}"`;
        chomp $ls;
        print "${ls}\n";
        exit 0;
    }

    print "${path}\n";
    exit 0;
}

