#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_all;
my $a_color;
my $a_every;
my $a_keep;
my $a_inline;
my $a_help;

my $escapeSequence = "\x1b[38;5;";
my $defaultText = "colour";

sub help() {
    print STDOUT <<'HELP';

colors

USAGE:
  >> colors [<text>] [options]

OPTIONS:
  --all    (-a) Show all colors
  --color  (-c) Color(s) to use ("|" delimited)
  --keep   (-k) Do not reset back to white
  --every  (-e) Switch color after every character
  --inline (-i) No carriage-return
  --help   (-h) See this message

EXAMPLES:
  >> colors       # show available semantic colors
  >> colors --all # see all colors
  >>
  >> # when printing text, by default a random color will be used
  >> colors "buffalo"
  >> colors "buffalo" --keep      # terminal will remain in color
  >> colors "the |buffalo |bills" # random color for each word
  >>
  >> # use --color to specify "|" delimited colors
  >> colors "buffalo" --color red
  >> colors "buffalo" --color 100 # specific color (see --all)
  >> colors "the |buffalo |bills" --color "red|white|blue"

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub resetColor {
    printf "${escapeSequence}7m";
}

sub getColor  {
    my $color = $_[0];
    if (!defined $color || $color eq "random") {
        $color = int(rand(256));
    } elsif ($color eq "red") {
        $color = 1;
    } elsif ($color eq "green") {
        $color = 2;
    } elsif ($color eq "yellow") {
        $color = 3;
    } elsif ($color eq "blue") {
        $color = 4;
    } elsif ($color eq "magenta") {
        $color = 5;
    } elsif ($color eq "cyan") {
        $color = 6;
    } elsif ($color eq "white") {
        $color = 7;
    } elsif ($color eq "black") {
        $color = 8;
    } elsif ($color eq "orange") {
        $color = 9;
    }
    return $color;
}


MAIN: {
    GetOptions(
        'all' => \$a_all,
        'color=s' => \$a_color,
        'inline' => \$a_inline,
        'every' => \$a_every,
        'keep' => \$a_keep,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    if (defined $a_all) {
        for (my $i = 0; $i < 256; $i++) {
            printf "${escapeSequence}${i}mcolour${i}\n";
        }
        exit 0;
    }

    if (!defined $firstArg && !defined $a_color) {
        printf "${escapeSequence}1mred (1)\n";
        printf "${escapeSequence}2mgreen (2)\n";
        printf "${escapeSequence}3myellow (3)\n";
        printf "${escapeSequence}4mblue (4)\n";
        printf "${escapeSequence}5mmagenta (5)\n";
        printf "${escapeSequence}6mcyan (6)\n";
        printf "${escapeSequence}7mwhite (7)\n";
        printf "${escapeSequence}8mblack (8)\n";
        printf "${escapeSequence}9morange (9)\n";

        resetColor();
        my $random_color = int(rand(256));
        printf "random: ${escapeSequence}${random_color}m${random_color}\n";

        resetColor();
        exit 0;
    }

    my $text = $firstArg;
    if (!defined $text) {
        $text = $defaultText;
    }

    if (defined $a_every) {
        $text = join("|", split(//, $text));
    }

    if ($text =~ /\|/) {
        my @texts = split(/\|/, $text);
        my $count = 0;
        my $color_input = $a_color;
        if (!defined $color_input) {
            $color_input = "random";
        }
        foreach my $t (@texts) {
            my @colors = split(/\|/, $color_input);
            my $color = getColor($colors[$count]);
            printf "${escapeSequence}${color}m${t}";
            $count++;
        }
    } else {
        my $color = getColor($a_color);
        printf "${escapeSequence}${color}m${text}";
        if ($text eq "colour") {
            print "${color}";
        }
    }

    if (!defined $a_inline) {
        print "\n";
    }

    if (!defined $a_keep) {
        resetColor();
    }

    exit 0;
}

