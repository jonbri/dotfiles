#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_first;
my $a_help;

sub help() {
    print STDERR <<'HELP';

crumb - an additional cache for refs

Per-repo. Using the reflog as a database.

USAGE:
  >> crumb       # see crumbs
  >> crumb [arg] # create crumb

Options:
  --first (-f) Print most recent matching SHA
  --help  (-h) See this message

EXAMPLES:
  >> crumb        # list local entries
  >> crumb my-bug # add "my-bug" entry

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}


sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

MAIN: {
    GetOptions(
        'first' => \$a_first,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    if (defined $a_first) {
        my $reflogCommand = "git reflog";
        my $command = "${reflogCommand} | grep \"CRUMB: \" | nth 0 | awk '{ print \$1 }'";
        my $output = join "", runCommand($command);
        chomp $output;
        print "$output\n";
        exit 0;
    }

    if (!defined $firstArg) {
        my $reflogCommand = "git reflog --pretty='%h %cd %gs' --date=format:'%a %b%d %H:%M:%S'";
        my $command = "${reflogCommand} | grep \"CRUMB: \" | head";
        my $output = join "", runCommand($command);
        chomp $output;
        print "$output\n";
        exit 0;
    }

    if (defined $firstArg) {
        my $escapedFirstArg = $firstArg;
        $escapedFirstArg =~ s/"/\\"/g;
        runCommand("git update-ref -m \"CRUMB: ${escapedFirstArg}\" HEAD HEAD");
    }

    exit 0;
}

