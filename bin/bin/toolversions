#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_dynamic;
my $a_help;

my $DYNAMIC_STATUS_CONTROL_VALUE="0";
my $KEY = "DYNAMIC_STATUS_CONTROL";
my $SPACE="  ";

sub help() {
    print STDOUT <<'HELP';

toolversions

Options:
  --dynamic (-d) use DYANMIC_STATUS_CONTROL
  --help    (-h) See this message

EXAMPLES:
  >> toolversions
  >> toolversions --dynamic

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}


MAIN: {
    GetOptions(
        'dynamic' => \$a_dynamic,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    my $nodeVersionCommand = "node --version | nth -c 1-50";
    my $neovimVersionCommand = "nvim --version | nth -c 6-50 0";
    my $gitVersionCommand = "git --version | nth -c 12-50";
    my @output = (
      "node@".`$nodeVersionCommand`,
      "neovim@".`$neovimVersionCommand`,
      "git@".`$gitVersionCommand`
    );

    if (!defined $a_dynamic) {
      foreach(@output) {
          print "$_\n";
      }
      exit 0;
    }

    $DYNAMIC_STATUS_CONTROL_VALUE=`increment $KEY --show`;
    chomp $DYNAMIC_STATUS_CONTROL_VALUE;

    my $mod = scalar (@output) + 1;
    $DYNAMIC_STATUS_CONTROL_VALUE = $DYNAMIC_STATUS_CONTROL_VALUE % $mod;

    my $OUT="";
    if ($DYNAMIC_STATUS_CONTROL_VALUE eq "0" ) {
      foreach(@output) {
          $OUT="${OUT}$_${SPACE}";
      }
    } else {
        $OUT=$output[$DYNAMIC_STATUS_CONTROL_VALUE - 1];
    }

    $OUT =~ s/@//g;
    print $OUT;

    exit 0;
}

