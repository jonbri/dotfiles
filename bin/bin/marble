#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_list;
my $a_gui;
my $a_write;
my $a_show;
my $a_promote;
my $a_color;
my $a_archive;
my $a_delete;
my $a_explorer;
my $a_verbose;
my $a_help;

my $WIN_DESKTOP=$ENV{"WIN_DESKTOP"};
my $WIN_DESKTOP_SAVE=$ENV{"WIN_DESKTOP_SAVE"};
my $DEFAULT_NOTE_NAME="_default";
my $colorscheme = "blue";
my $home=$ENV{HOME};

my $DESKTOP=$WIN_DESKTOP;
if (! -d $DESKTOP) {
    $DESKTOP="${home}/Desktop";
}
if (! -d $DESKTOP) {
    print "Cannot find $DESKTOP\n";
    print "exiting\n";
    exit 1;
}

my $DESKTOP_SAVE=$WIN_DESKTOP_SAVE;
if (! -d $DESKTOP_SAVE) {
    $DESKTOP_SAVE="${DESKTOP}/save";
}
`mkdir -p ${DESKTOP_SAVE}`;
if (! -d $DESKTOP_SAVE) {
    print "Cannot find $DESKTOP_SAVE\n";
    print "exiting\n";
    exit 1;
}

my $MARBLE_DIR="${home}/marble";
my $PROMOTED_DIR_NAME="promoted";
my $BACKUP_DIR_NAME="backup";
my $ARCHIVE_DIR_NAME="archive";
my $WORK_DIR="${MARBLE_DIR}/work";
my $PROMOTED_DIR="${MARBLE_DIR}/${PROMOTED_DIR_NAME}";
my $BACKUP_DIR="${MARBLE_DIR}/${BACKUP_DIR_NAME}";
my $ARCHIVE_DIR="${MARBLE_DIR}/${ARCHIVE_DIR_NAME}";

sub help() {
    print STDOUT <<'HELP';

marble - take quick notes

USAGE:
  >> marble [options]

Options:
  --list     (-l) List files
  --gui      (-g) Open in graphical editor
  --promote  (-p) Move between work and promoted
  --write    (-w) Save to desktop
  --show     (-s) Print to stdout
  --color    (-c) Vim color scheme
  --archive  (-a) Archive a note file
  --delete   (-d) Delete a note file
  --explorer (-e) Open dir
  --verbose  (-v) Extra logging
  --help     (-h) See this message

EXAMPLES:
  >> marble      # start taking notes
  >> marble -w   # create copy of default file on desktop
  >> marble foo  # edit foo file
  >> marble foo -g "notepad.exe" # edit foo file in notepad

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

sub confirm($) {
    my ($message)=@_;
    print $message;
    my $ok=<>;
    chomp $ok;
    return $ok;
}


MAIN: {
    GetOptions(
        'list' => \$a_list,
        'gui:s' => \$a_gui,
        'write' => \$a_write,
        'show' => \$a_show,
        'promote' => \$a_promote,
        'color:s' => \$a_color,
        'archive' => \$a_archive,
        'delete' => \$a_delete,
        'explorer' => \$a_explorer,
        'verbose' => \$a_verbose,
        'help' => \$a_help,
    ) || (help() && exit 1);

    if (defined $a_gui && $a_gui eq "") {
        $a_gui = "notepad.exe";
    }

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    `mkdir -p ${WORK_DIR}`;
    `mkdir -p ${PROMOTED_DIR}`;
    `mkdir -p ${BACKUP_DIR}`;
    `mkdir -p ${ARCHIVE_DIR}`;

    if (defined $a_explorer) {
        system("explorer.exe `wslpath -w ${WORK_DIR}`");
        exit 0;
    }

    if ($a_verbose) {
        print "WORK_DIR: ${WORK_DIR}\n";
        print "BACKUP_DIR: ${BACKUP_DIR}\n";
        print "ARCHIVE_DIR: ${ARCHIVE_DIR}\n";
    }

    my $workList = `ls -t ${WORK_DIR}`;
    chomp $workList;
    my @filteredWorkList = split(/\n/, $workList);
    if (defined $firstArg && $firstArg !~ /^\d+$/) {
        @filteredWorkList = grep { /$firstArg/ } split(/\n/, $workList);
        @filteredWorkList = map { s/.txt$//g; $_ } @filteredWorkList;
    }

    my $promotedList = `ls -t ${PROMOTED_DIR}`;
    chomp $promotedList;
    my @filteredPromotedList = split(/\n/, $promotedList);
    if (defined $firstArg) {
        @filteredPromotedList = grep { /$firstArg/ } split(/\n/, $promotedList);
        @filteredPromotedList = map { s/.txt$//g; $_ } @filteredPromotedList;
    }

    my $noteName = $DEFAULT_NOTE_NAME;
    if (defined $firstArg) {
        if ($firstArg =~ /^\d+$/) {
            my $index = $firstArg;
            if ($index < scalar(@filteredWorkList)) {
                print "index: $index\n";
                my $count = 0;
                foreach my $line (@filteredWorkList) {
                    if ($count == $index) {
                        $noteName = $line;
                        $noteName =~ s/.txt$//g;
                        last;
                    }
                    $count++;
                }
            }
        } else {
            $noteName = $firstArg;
        }
    }

    if (defined $a_list) {
        if (scalar(@filteredWorkList) == 0) {
            print "Work: (none)\n";
        } else {
            print "\nWork:\n";
            my $count = 0;
            foreach my $line (@filteredWorkList) {
                my $timestamp = `stat -c %y ${WORK_DIR}/${line}`;
                chomp $timestamp;
                my $formattedTimestamp = `shortdate "${timestamp}" --date`;
                chomp $formattedTimestamp;
                $line =~ s/.txt$//g;
                printf "%2d %s %s\n", $count, $formattedTimestamp, $line;
                $count++;
            }
        }
        print "\n";

        if (scalar(@filteredPromotedList) == 0) {
            print "Promoted: (none)\n";
        } else {
            print "Promoted:\n";
            foreach my $line (@filteredPromotedList) {
                my $timestamp = `stat -c %y ${PROMOTED_DIR}/${line}`;
                chomp $timestamp;
                my $formattedTimestamp = `shortdate "${timestamp}" --date`;
                chomp $formattedTimestamp;
                $line =~ s/.txt$//g;
                print "$formattedTimestamp $line\n";
            }
        }
        print "\n";

        exit 0;
    }

    my $workNoteFilePath = "${WORK_DIR}/${noteName}.txt";
    my $promotedNoteFilePath = "${PROMOTED_DIR}/${noteName}.txt";

    if (-e "$workNoteFilePath" && -e "$promotedNoteFilePath") {
        print "Note exists in both work and promoted\n";
        exit 1;
    }

    my $path = $workNoteFilePath;
    if (-e "$promotedNoteFilePath") {
        $path = $promotedNoteFilePath;
    }

    if (defined $a_gui) {
        `${a_gui} ${path}`;
        exit 0;
    }

    if (defined $a_show) {
        if (defined $noteName && ! -e $path) {
            print "Notes file does not exist\n";
            exit 1;
        }

        print `cat ${path}`;
        print "\n";
        exit 0;
    }

    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
    $year += 1900;
    $mon += 1;
    my $timestamp = "$year\_$mon\_$mday\_$hour\_$min\_$sec";

    # make backup
    my $backupFile = "${BACKUP_DIR}/${DEFAULT_NOTE_NAME}";
    if (defined $noteName) {
        $backupFile = "${BACKUP_DIR}/$noteName";
    }
    $backupFile = "${backupFile}-${timestamp}.txt";
    if (! -e $path) {
        if (defined $a_verbose) {
            print "Skipping backup since file not found: ${path}\n";
        }
    } else {
        `cp ${path} ${backupFile}`;
        if (defined $a_verbose) {
            print "Backup saved to ${backupFile}\n";
        }
    }

    if (defined $a_write) {
        # if (defined $noteName && ! -e $path) {
        if (! -e $path) {
            print "File not found: ${path}\n";
            exit 1;
        }
        `cp ${path} ${DESKTOP}`;
        exit 0;
    }

    if (defined $a_promote) {
        if (! -e $path) {
            print "File not found: ${path}\n";
            exit 1;
        }

        # if default note, print error and exit
        if ($path eq "${WORK_DIR}/${DEFAULT_NOTE_NAME}.txt") {
            print "Cannot move default note\n";
            exit 1;
        }

        # if already in promoted, move to work
        if (-e "${PROMOTED_DIR}/${noteName}.txt") {
            `mv ${path} ${WORK_DIR}/${noteName}.txt`;
            print "Moved back to work\n";
        } else {
            `mv ${path} ${PROMOTED_DIR}/${noteName}.txt`;
            print "Moved to promoted\n";
        }
        exit 0;
    }

    if (defined $a_archive) {
        if (! -e $path) {
            print "File not found: ${path}\n";
            exit 1;
        }

        my $archiveFile = "${ARCHIVE_DIR}/${DEFAULT_NOTE_NAME}";
        if (defined $noteName) {
            $archiveFile = "${ARCHIVE_DIR}/$noteName";
        }
        $archiveFile = "${archiveFile}.txt";

        `mv ${path} ${archiveFile}`;
        if (defined $a_verbose) {
            print "Archive saved to: ${archiveFile}\n";
        }
        exit 0;
    }

    if (defined $a_delete) {
        if (! -e $path) {
            print "File not found: ${path}\n";
            exit 1;
        }

        confirm("rm ${path}? (press enter)");
        if (defined $a_verbose) {
            print "Removing ${path}...\n";
        }
        sleep 2;
        `rm ${path}`;
        print "Removed\n";
        exit 0;
    }

    if (defined $a_color) {
        $colorscheme = $a_color;
    }

    my $marker = "marblehere";
    my $markerLine = 1;
    if (-e $path) {
        my $fileContents = `cat ${path}`;
        chomp $fileContents;
        if ($fileContents =~ /$marker/) {
            # determine which line the marker was found at
            my @lines = split(/\n/, $fileContents);
            for (my $i = 0; $i < scalar(@lines); $i++) {
                if ($lines[$i] =~ /$marker/) {
                    $markerLine = $i + 1;
                    last;
                }
            }
        } else {
            # last line
            $markerLine = `wc -l ${path} | awk '{print \$1}'`;
        }
    }

    system("nvim -c \"colorscheme $colorscheme | normal ${markerLine}Gzz\" \"${path}\"");
    exit 0;
}

