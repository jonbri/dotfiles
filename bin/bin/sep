#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_text;
my $a_padding;
my $a_help;

sub help() {
    print STDOUT <<'HELP';

sep - show lines

USAGE:
  >> sep [options]

Options:
  --text    (-t) Text placed within dashes
  --padding (-p) Vertical padding (default: 1)
  --help    (-h) See this message

EXAMPLES:
  >> sep
  >> sep 10 # show 10 lines
  >> sep 10 -t "Hello" # show 10 lines with text
  >> sep 10 -p 2     # two lines on each side of dashes
  >> sep 10 -p "0-2" # only padding after dashes

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

MAIN: {
    GetOptions(
        'text=s' => \$a_text,
        'padding=s' => \$a_padding,
        'help' => \$a_help,
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg = getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    my $beforePadding = $a_padding;
    if (!defined $beforePadding) {
        $beforePadding = 1;
    } elsif ($beforePadding =~ /^(\d+)$/) {
        $beforePadding = $1;
    } elsif ($beforePadding =~ /^(\d+)-(\d+)$/) {
        $beforePadding = $1;
    } else {
        die "Invalid padding: $beforePadding";
    }

    my $afterPadding = $a_padding;
    if (!defined $afterPadding) {
        $afterPadding = 1;
    } elsif ($afterPadding =~ /^(\d+)$/) {
        $afterPadding = $1;
    } elsif ($afterPadding =~ /^(\d+)-(\d+)$/) {
        $afterPadding = $2;
    } else {
        die "Invalid padding: $afterPadding";
    }

    for (my $i = 0; $i < $beforePadding; $i++) {
        print "\n";
    }

    my $lines = $firstArg;
    if (!defined $lines) {
        $lines = 40;
    }

    my $displayText = "";
    for (my $i = 0; $i < $lines; $i++) {
        $displayText .= "-";
    }

    if (defined $a_text) {
        for (my $i = 0; $i < length($a_text); $i++) {
            substr($displayText, $i + 1, 1) = substr($a_text, $i, 1);
        }
    }

    print $displayText;

    for (my $i = 0; $i < $afterPadding; $i++) {
        print "\n";
    }

    print "\n";
    exit 0;
}
