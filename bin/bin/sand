#!/usr/bin/perl -w
# sand - meant to be called over and over

use strict;

use Getopt::Long;

my $a_help;
my $a_pass;

sub help() {
    print STDOUT <<'HELP';

sand - hourglass simulation

USAGE:
  >> sand [options]

Options:
  --pass  (-p) Bypass filter
  --help  (-h) See this message

EXAMPLES:
  >> sand input

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}


sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

MAIN: {
    GetOptions(
        'help' => \$a_help,
        'pass' => \$a_pass,
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    my $indicator = $firstArg;
    if (!defined $firstArg) {
        print "argument required\n";
        die 1;
    }
    my $length = length($indicator);
    my $time = time();

    if (defined $a_pass) {
        print "$indicator\n";
        exit 0;
    }

    my @chars = ();
    for(my $i = 0; $i < $length; $i++) {
        my $char = substr($indicator, $i, 1);
        if ($i == $time % $length) {
            $char = uc($char);
        }
        push (@chars, $char);
    }
    print join('', @chars)."\n";

    exit 0;
}

