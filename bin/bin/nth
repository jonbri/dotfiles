#!/usr/bin/perl -w
# nth - print nth line from stdin

use strict;

use Getopt::Long;

my $a_first;
my $a_last;
my $a_char;
my $a_reverse;
my $a_backwards;
my $a_trim;
my $a_help;

sub help() {
    print STDERR <<'HELP';

nth - print nth line from stdin

USAGE:
  >> nth [number|range] [options]

Options:
  --first     (-f) Print first line
  --last      (-l) Print last line
  --char      (-c) Crop line range
  --reverse   (-r) Reverse row order
  --backwards (-b) Row text is reversed
  --trim      (-t) Trim trailing spaces
  --help      (-h) See this message

EXAMPLES:
  >> nth          # print first line
  >> nth 4        # print fourth line
  >> nth 4 -c 3-5 # print substring of fourth line
  >> nth 4-5 -r   # print reversed range of lines
  >> nth -f       # print first line
  >> nth -l       # print last line

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

MAIN: {
    GetOptions(
        'first' => \$a_first,
        'last' => \$a_last,
        'char:s' => \$a_char,
        'reverse' => \$a_reverse,
        'backwards' => \$a_backwards,
        'trim' => \$a_trim,
        'help' => \$a_help
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    my $targetLine = $firstArg;
    if (! defined $targetLine) {
        $targetLine = 0;
    }
    my $start = 0;
    my $end = 0;
    if ($targetLine =~ /[\d]+-[\d]+/) {
        $start = `echo $targetLine | awk -F "-" '{ print \$1 }'`;
        $end = `echo $targetLine | awk -F "-" '{ print \$2 }'`;
        chomp $start;
        chomp $end;
    } else {
        $start = $targetLine;
        $end = $targetLine;
    }

    if ($a_first) {
        $start = 0;
        $end = 1;
    } elsif ($a_last) {
        $start = -1;
        $end = -1;
    }
    my $count = 0;
    my @linesToPrint = ();
    while (<>) {
        if ($count >= $start && $count < ($end + 1)) {
            push(@linesToPrint, $_);
        }
        $count = $count + 1;
    }

    if (defined $a_reverse) {
        @linesToPrint = reverse(@linesToPrint);
    }

    foreach (@linesToPrint) {
        my $lineToPrint = $_;
        if (defined $a_char) {
            my $c_start = 0;
            my $c_end = 0;
            if ($a_char =~ /[\d]+-[\d]+/) {
                $c_start = `echo $a_char | awk -F "-" '{ print \$1 }'`;
                $c_end = `echo $a_char | awk -F "-" '{ print \$2 }'`;
                chomp $c_start;
                chomp $c_end;
            } else {
                $c_start = $a_char;
                $c_end = $a_char + 1;
            }
            my $substring = substr($_, $c_start, ($c_end + 1) - $c_start);
            chomp $substring;
            $lineToPrint = $substring;
        }

        if (defined $a_backwards) {
            $lineToPrint = reverse $lineToPrint;
        }

        if (defined $a_trim) {
            $lineToPrint=~ s/\s+$//;
        }
        print "$lineToPrint";
    }

    exit 0;
}

