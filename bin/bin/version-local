#!/usr/bin/perl -w

use strict;

use Getopt::Long;

STDOUT->autoflush(1);

my $a_full;
my $a_short;
my $a_poll;
my $a_dir;
my $a_help;

my $count = 0;

sub help() {
    print STDOUT <<'HELP';

version-local - `yarn why` wrapper

USAGE:
  >> version-local [args]

Options:
  --full  (-f) show full "yarn why" output
  --short (-s) only show version number
  --poll  (-p) poll for latest versions
  --dir   (-d) specify directory
  --help  (-h)

EXAMPLES:
  >> version-local react
  >> version-local react react-dom
  >> version-local react -s # -> 18.2.0
  >> version-local react typescript -d ~/project

HELP
}

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

sub clearScreen {
    print "\033[2J";
    print "\033[0;0H";
}

MAIN: {
    GetOptions(
        'help' => \$a_help,
        'full' => \$a_full,
        'short' => \$a_short,
        'poll:s' => \$a_poll,
        'dir=s' => \$a_dir,
    ) || (help() && exit 1);

    if (defined $a_help) {
        help();
        exit 1;
    }

    my @args = @ARGV;

    my $dir = $a_dir;
    if (!defined $dir) {
        $dir = "./";
    }

    if (defined $a_full) {
        foreach my $arg (@args) {
            if (scalar @args > 1) {
                print "$arg\n";
            }
            my @whyResults = runCommand("yarn --cwd $dir why $arg");
            print(@whyResults);
            if (scalar @args > 1 && $arg ne $args[-1]) {
                print "\n";
            }
        }
        exit 0;
    }

    do {
        $| = 1;
        my @results = ();
        foreach my $arg (@args) {
            my $result = "";
            if (!defined $a_short) {
                $result .= "$arg";
                $result .= "@";
            }

            my @whyResults = runCommand("yarn --cwd $dir why $arg");
            my $version = join("", grep(/Found/, @whyResults));

            if ($version eq "") {
                $version = "ERROR";
            } else {
                $version =~ s/.*Found //;
                $version =~ s/\"//g;
                $version =~ s/$arg//;
                $version =~ s/\@//g;
            }
            chomp $version;

            $result .= "$version";
            $result .= "\n";

            push(@results, "$result");
        }

        if (! defined $a_poll) {
            foreach(@results) {
                print("$_");
            }
            exit 0;
        }

        clearScreen();
        my $sd = `shortdate`;
        chomp $sd;
        print "$sd ($count)\n\n";
        $count = $count + 1;
        foreach(@results) {
            print("$_");
        }

        my $pollInterval = 1;
        if ($a_poll =~ /^[0-9]+$/) {
            $pollInterval = $a_poll;
        }

        print "\npolling in $pollInterval seconds...";
        sleep $pollInterval;
    } while (1);

    exit 0;
}

