#!/usr/bin/perl -w
# notes - take quick notes

use strict;

use Getopt::Long;

my $a_list;
my $a_notepad;
my $a_write;
my $a_print;
my $a_color;
my $a_archive;
my $a_delete;
my $a_explorer;
my $a_verbose;
my $a_help;

my $DEFAULT_NOTE_NAME="_default";
my $colorscheme = "blue";
my $home=$ENV{HOME};
my $WIN_DESKTOP=$ENV{"WIN_DESKTOP"};
my $WIN_DESKTOP_SAVE=$ENV{"WIN_DESKTOP_SAVE"};

my $DESKTOP=$WIN_DESKTOP;
if (! -d $DESKTOP) {
    $DESKTOP="${home}/Desktop";
}
if (! -d $DESKTOP) {
    print "Cannot find $DESKTOP\n";
    print "exiting\n";
    exit 1;
}

my $DESKTOP_SAVE=$WIN_DESKTOP_SAVE;
if (! -d $DESKTOP_SAVE) {
    $DESKTOP_SAVE="${DESKTOP}/save";
}
if (! -d $DESKTOP_SAVE) {
    print "Cannot find $DESKTOP_SAVE\n";
    print "exiting\n";
    exit 1;
}

my $NOTES_DIR="${DESKTOP_SAVE}/_notes";
my $BACKUP_DIR_NAME="z_backup";
my $ARCHIVE_DIR_NAME="z_archive";
my $NOTES_BACKUP_DIR="${NOTES_DIR}/${BACKUP_DIR_NAME}";
my $NOTES_ARCHIVE_DIR="${NOTES_DIR}/${ARCHIVE_DIR_NAME}";

sub help() {
    print STDOUT <<'HELP';

notes - take quick notes

USAGE:
  >> notes [options]

Options:
  --list     (-l) List notes files
  --notepad  (-n) Open in notepad
  --write    (-w) Save to desktop
  --print    (-p) Print to stdout
  --color    (-c) Vim color scheme
  --archive  (-a) Archive a note file
  --delete   (-d) Delete a note file
  --explorer (-e) Open notes dir
  --verbose  (-v) Extra logging
  --help     (-h) See this message

EXAMPLES:
  >> notes        # start taking notes
  >> notes -w     # create copy of default notes file on desktop
  >> notes foo    # edit foo notes file
  >> notes -n     # edit default notes file in notepad
  >> notes foo -n # edit foo notes file in notepad

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

sub runCommand($) {
    my ($command) = @_;
    open CMD, "$command |" || die "Unable to run $command: $!";
    my @output = <CMD>;
    close CMD;
    return @output;
}

sub confirm($) {
    my ($message)=@_;
    print $message;
    my $ok=<>;
    chomp $ok;
    return $ok;
}


MAIN: {
    GetOptions(
        'list' => \$a_list,
        'notepad:s' => \$a_notepad,
        'write' => \$a_write,
        'print' => \$a_print,
        'color:s' => \$a_color,
        'archive' => \$a_archive,
        'delete' => \$a_delete,
        'explorer' => \$a_explorer,
        'verbose' => \$a_verbose,
        'help' => \$a_help,
    ) || (help() && exit 1);

    # show help if either arg or option is given
    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    `mkdir -p ${NOTES_DIR}`;
    `mkdir -p ${NOTES_BACKUP_DIR}`;
    `mkdir -p ${NOTES_ARCHIVE_DIR}`;

    if (defined $a_explorer) {
        system("explorer.exe `wslpath -w ${NOTES_DIR}`");
        exit 0;
    }

    if ($a_verbose) {
        print "NOTES_DIR: ${NOTES_DIR}\n";
        print "NOTES_BACKUP_DIR: ${NOTES_BACKUP_DIR}\n";
        print "NOTES_ARCHIVE_DIR: ${NOTES_ARCHIVE_DIR}\n";
    }

    if (defined $a_list) {
        my $lsCommand = "ls ${NOTES_DIR} | grep -v ${ARCHIVE_DIR_NAME} | grep -v ${BACKUP_DIR_NAME}";
        if (defined $firstArg) {
            $lsCommand .= " | grep $firstArg";
        }
        $lsCommand .= " | sed -e 's/.txt\$//g'";
        print runCommand($lsCommand);
        exit 0;
    }

    my $path = "${NOTES_DIR}/${DEFAULT_NOTE_NAME}.txt";
    if (defined $firstArg) {
        $path = "${NOTES_DIR}/$firstArg.txt";
    }

    if (defined $a_notepad) {
        `notepad.exe ${path}`;
        exit 0;
    }

    if (defined $a_print) {
        if (defined $firstArg && ! -e $path) {
            print "Notes file does not exist\n";
            exit 1;
        }

        print `cat ${path}`;
        print "\n";
        exit 0;
    }

    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
    $year += 1900;
    $mon += 1;
    my $timestamp = "$year\_$mon\_$mday\_$hour\_$min\_$sec";

    # make backup
    my $backupFile = "${NOTES_BACKUP_DIR}/${DEFAULT_NOTE_NAME}";
    if (defined $firstArg) {
        $backupFile = "${NOTES_BACKUP_DIR}/$firstArg";
    }
    $backupFile = "${backupFile}-${timestamp}.txt";
    if (! -e $path) {
        if (defined $a_verbose) {
            print "Skipping backup since file not found: ${path}\n";
        }
    } else {
        `cp ${path} ${backupFile}`;
        if (defined $a_verbose) {
            print "Backup saved to ${backupFile}\n";
        }
    }

    if (defined $a_write) {
        # if (defined $firstArg && ! -e $path) {
        if (! -e $path) {
            print "File not found: ${path}\n";
            exit 1;
        }
        `cp ${path} ${DESKTOP}`;
        exit 0;
    }

    if (defined $a_archive) {
        if (! -e $path) {
            print "File not found: ${path}\n";
            exit 1;
        }

        my $archiveFile = "${NOTES_ARCHIVE_DIR}/${DEFAULT_NOTE_NAME}";
        if (defined $firstArg) {
            $archiveFile = "${NOTES_ARCHIVE_DIR}/$firstArg";
        }
        $archiveFile = "${archiveFile}.txt";

        `mv ${path} ${archiveFile}`;
        if (defined $a_verbose) {
            print "Archive saved to: ${archiveFile}\n";
        }
        exit 0;
    }

    if (defined $a_delete) {
        if (! -e $path) {
            print "File not found: ${path}\n";
            exit 1;
        }

        confirm("rm ${path} ?");
        if (defined $a_verbose) {
            print "Removing ${path}...\n";
        }
        `rm ${path}`;
        print "Removed\n";
        exit 0;
    }

    if (defined $a_color) {
        $colorscheme = $a_color;
    }
    system("nvim -c \"colorscheme $colorscheme | normal Gzz\" \"${path}\"");
    exit 0;
}

