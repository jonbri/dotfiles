#!/usr/bin/perl -w

use strict;

use Getopt::Long;

my $a_ref;
my $a_dryRun;
my $a_help;

my $prettier = "./node_modules/.bin/prettier";

sub help() {
    print STDOUT <<'HELP';

yff - only format changed files

USAGE:
  >> yff

Options:
  --ref     (-r) Format files affected by Git ref
  --dry-run (-d) Only show files that would be updated
  --help    (-h) See this message

EXAMPLES:
  >> yff
  >> yff Button
  >> yff --ref HEAD~

HELP
}

sub getFirstNonOptionArg {
    my $arg = shift @ARGV;
    if (!defined $arg) {
        return;
    }
    return ($arg =~ /^-/) ? getFirstNonOptionArg() : $arg;
}

MAIN: {
    GetOptions(
        'ref=s' => \$a_ref,
        'dry-run' => \$a_dryRun,
        'help' => \$a_help
    ) || (help() && exit 1);

    my $firstArg=getFirstNonOptionArg();
    if (($firstArg && $firstArg eq "help") || defined $a_help) {
        help();
        exit 1;
    }

    if (!-e $prettier) {
        print "Error: prettier not found at ${prettier}\n";
        exit 1;
    }

    if ($firstArg) {
        system("$prettier \"**/*$firstArg*\" --write");
        exit 0;
    }

    my @changed_files;
    if (defined $a_ref) {
        @changed_files = `git diff-tree --no-commit-id --name-only ${a_ref} -r`;
    } else {
        @changed_files = `git diff --name-only`;
    }

    if (scalar @changed_files == 0) {
        print "No changed files\n";
        exit 0;
    }

    foreach my $file (@changed_files) {
        chomp $file;
        if (!-e $file) {
            next;
        }
        if (!defined $a_dryRun) {
            print "Formatting $file\n";
            system("$prettier --write $file");
        } else {
            print "$file\n";
        }
    }

    exit 0;
}

